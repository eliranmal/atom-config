#!/usr/bin/env bash


usage() {
	echo "
  USAGE

  ./atom-config.sh <import|export|unimport> [--skip-packages]


  OVERVIEW

  this command syncs configuration files and/or installed packages of the Atom code editor with the local repository.


  SUBCOMMANDS

  import
    imports stuff into atom:
    saves a backup of any existing .cson files under the atom configuration directory, and replaces the originals with configuration files from the local repository.
    also, unless --skip-packages is used, installs all packages found on the package list file generated by the export command.

  export
    exports stuff from atom:
    copies all .cson files under the atom configuration directory, as well as a generated file with the list of installed packages, into the local repository.

  unimport
    restores atom configuration files from a saved backup, and uninstalls all packages on the package list file.
    beware! use this action only immediately after an import, as it will overwrite any existing atom configuration, and is irreversible.

"
}

main() {
	validate "$@"

	local action
	local store_temp_dir
	local source_dir="$( cd "$(dirname "${BASH_SOURCE}")" ; pwd -P )"
	local store_dir="$source_dir"'/../etc'

	store_temp_dir="$(create_temp_dir)"
	cleanup_dir_on_exit "$store_temp_dir"

	if [[ -n $1 ]] && is_available "cmd_$1"; then
		action="$1"; shift
		cmd_${action} "$store_dir" "$store_temp_dir" "$@"
	fi

	echo
}


cmd_import() {
	local store_dir="$1"
	local store_temp_dir="$2"
	local flags="$3"
	log "copying all files from the local repository to a temp direcory"
	cp -r "$store_dir"/* "$store_temp_dir"
	backup_settings
	import_settings "$store_temp_dir"
	if [[ $flags != '--skip-packages' ]]; then
		import_packages "$store_temp_dir"
	fi
}

cmd_unimport() {
	local store_dir="$1"
	local store_temp_dir="$2"
	restore_settings
	unimport_packages "$store_temp_dir"
}

cmd_export() {
	local store_dir="$1"
	local store_temp_dir="$2"
	export_settings "$store_temp_dir"
	export_packages "$store_temp_dir"
	log "copying all files from the temp direcory into the local repository"
	cp -r "$store_temp_dir"/* "$store_dir"
}


import_settings() {
	local store_temp_dir="$1"
	log "copying configuration files from the temp direcory into atom's config direcory"
	cp "$store_temp_dir"/*.cson ~/.atom/
}

export_settings() {
	local store_temp_dir="$1"
	log "copying configuration files from atom's config direcory into a temp direcory"
	cp ~/.atom/*.cson "$store_temp_dir"
}

backup_settings() {
	log 'saving a backup of atom configuration files in-place, renamed as *.cson.backup files'
	for f in ~/.atom/*.cson; do
    cp -- "$f" "${f}.backup"
	done
}

restore_settings() {
	log 'overwriting atom configuration files in the atom config directory with *.cson.backup files'
	for f in ~/.atom/*.cson.backup; do
		mv -- "$f" "${f%.backup}"
	done
}

import_packages() {
	local store_temp_dir="$1"
	log "installing all packages found on the package list file:

$(cat "$store_temp_dir"'/package.list')
 "
	apm install --packages-file "$store_temp_dir"'/package.list'
}

unimport_packages() {
	local store_temp_dir="$1"
	log 'removing all packages found on the package list file'
	apm remove --packages-file "$store_temp_dir"'/package.list'
}

export_packages() {
	local store_temp_dir="$1"
	log 'storing a list of all installed (custom) packages to a file in the temp directory'
	apm list --installed --bare > "$store_temp_dir"'/package.list'
}

create_temp_dir() {
	mktemp -d 2>/dev/null || mktemp -d -t 'atom-config-sync'
}

cleanup_dir_on_exit() {
	trap 'rm -rf '"$@"' >/dev/null 2>&1' EXIT
}

validate() {
	if [[ -z $1 ]]; then
		usage
		exit 1
	fi
}

is_available() {
	type "$1" >/dev/null 2>&1
}

log() {
	echo "
 [atom-config] $1"
}


main "$@"
